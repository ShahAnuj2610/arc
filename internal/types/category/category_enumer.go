// Code generated by "enumer -type=Category -json -transform=snake"; DO NOT EDIT.

package category

import (
	"encoding/json"
	"fmt"
)

const _CategoryName = "catbulkclustersearchremotecreatecountscriptsdeletedocsourcefield_capscloseanalyzeexistsgettemplateexplainindicesaliasaliasesdelete_by_querycacheindexmappingflushforcemergeupgradesettingsopenrecoverymappingsrolloverrefreshsegmentsshrinksplitshard_storesstatsingestvalidatemsearchmgetnodesmtermvectorsreindexupdate_by_queryrenderrank_evalsearch_shardssnapshottaskstermvectorsupdate"

var _CategoryIndex = [...]uint16{0, 3, 7, 14, 20, 26, 32, 37, 44, 50, 53, 59, 69, 74, 81, 87, 90, 98, 105, 112, 117, 124, 139, 144, 149, 156, 161, 171, 178, 186, 190, 198, 206, 214, 221, 229, 235, 240, 252, 257, 263, 271, 278, 282, 287, 299, 306, 321, 327, 336, 349, 357, 362, 373, 379}

func (i Category) String() string {
	if i < 0 || i >= Category(len(_CategoryIndex)-1) {
		return fmt.Sprintf("Category(%d)", i)
	}
	return _CategoryName[_CategoryIndex[i]:_CategoryIndex[i+1]]
}

var _CategoryValues = []Category{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53}

var _CategoryNameToValueMap = map[string]Category{
	_CategoryName[0:3]:     0,
	_CategoryName[3:7]:     1,
	_CategoryName[7:14]:    2,
	_CategoryName[14:20]:   3,
	_CategoryName[20:26]:   4,
	_CategoryName[26:32]:   5,
	_CategoryName[32:37]:   6,
	_CategoryName[37:44]:   7,
	_CategoryName[44:50]:   8,
	_CategoryName[50:53]:   9,
	_CategoryName[53:59]:   10,
	_CategoryName[59:69]:   11,
	_CategoryName[69:74]:   12,
	_CategoryName[74:81]:   13,
	_CategoryName[81:87]:   14,
	_CategoryName[87:90]:   15,
	_CategoryName[90:98]:   16,
	_CategoryName[98:105]:  17,
	_CategoryName[105:112]: 18,
	_CategoryName[112:117]: 19,
	_CategoryName[117:124]: 20,
	_CategoryName[124:139]: 21,
	_CategoryName[139:144]: 22,
	_CategoryName[144:149]: 23,
	_CategoryName[149:156]: 24,
	_CategoryName[156:161]: 25,
	_CategoryName[161:171]: 26,
	_CategoryName[171:178]: 27,
	_CategoryName[178:186]: 28,
	_CategoryName[186:190]: 29,
	_CategoryName[190:198]: 30,
	_CategoryName[198:206]: 31,
	_CategoryName[206:214]: 32,
	_CategoryName[214:221]: 33,
	_CategoryName[221:229]: 34,
	_CategoryName[229:235]: 35,
	_CategoryName[235:240]: 36,
	_CategoryName[240:252]: 37,
	_CategoryName[252:257]: 38,
	_CategoryName[257:263]: 39,
	_CategoryName[263:271]: 40,
	_CategoryName[271:278]: 41,
	_CategoryName[278:282]: 42,
	_CategoryName[282:287]: 43,
	_CategoryName[287:299]: 44,
	_CategoryName[299:306]: 45,
	_CategoryName[306:321]: 46,
	_CategoryName[321:327]: 47,
	_CategoryName[327:336]: 48,
	_CategoryName[336:349]: 49,
	_CategoryName[349:357]: 50,
	_CategoryName[357:362]: 51,
	_CategoryName[362:373]: 52,
	_CategoryName[373:379]: 53,
}

// FromString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FromString(s string) (Category, error) {
	if val, ok := _CategoryNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Category values", s)
}

// Values returns all values of the enum.
func Values() []Category {
	return _CategoryValues
}

// IsACategory returns "true" if the value is listed in the enum definition. "false" otherwise.
func (c Category) IsACategory() bool {
	for _, v := range _CategoryValues {
		if c == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Category.
func (c Category) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Category.
func (c *Category) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Category should be a string, got %s", data)
	}

	var err error
	*c, err = FromString(s)
	return err
}
